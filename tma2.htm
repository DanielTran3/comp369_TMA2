<!DOCTYPE html>
<html>
   <head>
      <meta charset="utf-8">
        <link rel = "stylesheet" type="text/css" href="shared/tma2_stylesheet.css" />
        <script src="tma2.js"></script>
        <script type="text/javascript">
            window.onload = function () {
                pageStartup();
            }
        </script>
        <title>TMA1 - Main Page</title>
    </head>
    <body>
        <div class="linksBar">
            <ul>
                <li>
                    <a href="part1/resume.xml">Resume</a>
                </li>
                <li>
                    <a href="part2/WelcomeToLearnTheWeb.html">Learn The Web</a>
                </li>
                <li>
                    <a href="part3/photoSlideshow.html">Photo Slideshow</a>
                </li>
                <li>
                    <a href="part4/UtilityTools.html">Utility Tools</a>
                </li>
            </ul>
        </div>

        <div class="aside mainScreen">
            <button id="defaultOpen" class="active tablinks">Assignment #2</button>
            <button class="tablinks">SiteMark Documentation</button>
            <button class="tablinks">Learnatorium Documentation</button>
            <button class="tablinks">Notes for the Instructor</button>
        </div>

        <div class="main-content mainScreen">
            <div class="titleDiv">
                <span class="title1">Assignment #2 (TMA1)</span>
                <span class="title2">COMP 466 - Advanced Technologies for Web-Based Systems</span>
                <span class="title3">Daniel Tran - 3339325</span>
                <span class="title3">Start Date: October 12, 2017</span>
                <span class="title3">End Date: TBA</span>
                <span class="title3">Estimated Hours: 900 minutes</span>
            </div>
            <div class="titleDiv" hidden>
                <span class="title1">SiteMark Documentation</span>
                <span class="title2">Original Description and Requirements (Part 1 - 20 marks)</span>
                <p class="title4">
                    For this project, you will be using MySQL and PHP to develop a web application that provides 
                    an online bookmarking service to users on the Internet. The requirements are as follows:
                </p>
                <ol class="title4">
                    <li>
                        The web application should have a good thoughtful interface, with menus and navigation 
                        buttons as needed.
                    </li>
                    <li>
                        It should have a name or logo shown across all the pages.
                    </li>
                    <li>
                        It should begin with a welcome or greeting message and a list of ten most popular 
                        websites that people have bookmarked.
                    </li>
                    <li>
                        Once signed in, a list of bookmarks should be displayed, and the user can browse any web 
                        site in the list in a new browser tab or window by clicking the URL.
                    </li>
                    <li>
                        The user will also be able to add new websites to the list and edit and delete any of 
                        the existing ones in the list;
                    </li>
                    <li>
                        When adding or editing, user input needs to be validated using JavaScript, to make sure 
                        the URLs are correct and active.
                    </li>
                </ol>
                <p class="title4">
                    Save Part 1 files in the directory TMA2/part1.
                </p>
                
                <hr />
                
                <span class="title2">Interpretation of Description and Requirements</span>
                <p class="title4">
                    The project is a website bookmarking system that uses MySQL and PHP. Each page should have a logo and 
                    on the start of the page, before loggin in, there should be a list of the top 10 most popular websites. 
                    A person entering the website can login or create a new user. Once logged in, each of the user's bookmarks 
                    should be displayed. When thinking about a bookmarking system, there is usually a way to name the bookmark so that 
                    it is not just the URL that the user sees. This can be done for easier tracking of URLs and so that a long URL does not 
                    span the entire list element. The user can click on one of the bookmarks to open a new tab to the specified URL. On this page, 
                    the user can add, edit, or delete any bookmarks. This also means that there should also be a way to select a 
                    bookmark for editing and deleting without being able to open the link. As well, any added URLS must be valid, 
                    in which they must be a proper URL and they must be valid before adding or editing a URL.
                </p>

                <hr />

                <span class="title2">Analysis and Design of the Web Application</span>
                <p class="title4">
                    The system data should be stored in a MySQL data server, and the user's inputted data interacts with the server by using PHP. 
                    Every page should have the same logo, so the starting of all of the pages should have the same header information. On the main page, 
                    there will be an ordered list of each of the top 10 bookmarks in descending order. This should be available alongside the login and 
                    signup buttons. When pressing the signup button, the user should be able to create an account as long as the username is not already 
                    existing. For logging in, the correct username and password must be entered. Once logged in, there should be a list of all of the 
                    user's bookmarks. These bookmark links should be able to open the url in a tab when the bookmark url is pressed. Otherwise, clicking 
                    on the URL list element will select the bookmark. This will allow the bookmark to be edited or deleted without being able to open 
                    the actual URL. There are also two textboxes alongside the three buttons (Add, Edit, and Delete), which are the name and URL textboxes. 
                    The name textbox allows the user to specify an alternative name for their bookmark, while the URL textbox allows the user to input 
                    the actual website URL. Since these links must be verified before being added in, this will require javascript on the front-end to 
                    verify before sending the data back to be stored in the MySQL database.   
                </p>

                <hr />

                <span class="title2">Documentation of Implementation</span>                
                <p class="title4">
                    The MySQL data server is set up to contain two tables. The first table is a credentials table, which stores the information for all 
                    users in the system. There are two columns for this table, which are the username and password for the account. The second table is 
                    the bookmarks table, which stores information about the bookmark that the user has created. There are four columns, which are username, 
                    url, name, and hits. The username column contains the username of the user who created the bookmark. The url of the website that is 
                    accessible through the bookmark, the name is an alternative name given to the bookmark, and hits is the number of times that particular 
                    bookmark (created by that specific user) is pressed. Every page in the assignment has the same navigation header bar containing links to 
                    navigate throughout the application, with the logo displayed at the top left in a CSS modified h1 tag, and the logout option to the bottom 
                    right of the naviation bar. On the main page, the login and signup buttons redirect the user to the SiteMarkLogin.php and SiteMarkSignup.php 
                    files respectively. The top 10 hits list is created and displayed using an HTML ordered list element that's populated using the information 
                    read in from the MySQL database. The sql command that the PHP script runs is a select statement on the bookmarks table that orders the 
                    table in descending order by hits. The first 10 results are then retrieved. The hits are updated whenever a bookmark link is pressed, 
                    where a JavaScript function will create an async AJAX call to the UpdateHit.php file. This call will run a php script to call a SQL query 
                    which takes the url and username of the bookmark that was pressed and increment the hits column. When signing up for an account, in the 
                    SiteMarkSignup.php page, the user enters a username and password. When the signup button is pressed, the inputs are sent to the Signup.php 
                    file, which runs a SQL command to first check if the username exists, and if it doesn't then insert the inputted values into the credentials 
                    table. If the username does exist, then a message stating that the username already exists is displayed and the new account is not added to 
                    the credentials table. A similar process is done with logging in, where the user enters their username and password, presses the login 
                    button, and gets transfered to the Login.php file. This file will take the entered credentials, query the credentials table to see if the 
                    username exists and if it doesn't, then display that the username doesn't exist and do not login the user. Otherwise, a select query is 
                    run on the credentials table with the username and password used in the WHERE clause to filter search for a user with those credentials. 
                    If an account is found, it is returned and the username is saved into the session, otherwise, the user gets prompted that their username 
                    or password is incorrect. In the main page of the application, which is the Learnatorium.php page, the heart of the code exists. There is 
                    an unordered list that contains the bookmarks that the user created. Clicking on a bookmark will run JavaScript code to open the URL in a 
                    separate tab (and also run the AJAX function to update the hits for that bookmark, which was specified above). There are two HTML input 
                    elements that are used to receive the name of the bookmark and the URL. There are also three buttons to control adding, editing, and deleting 
                    of bookmarks. When the Add button is pressed, it runs some JavaScript code to check if the URL is valid and existing before storing it 
                    into the database. There are multiple steps to this confirmation, the first being is a regex expression that is used to check if the URL is 
                    in a correct format first of all (has http, www, and some sort of .com ending). Afterwards, a script calls an async AJAX function to the 
                    website calling a POST request. If the post request comes back successfully, then an AJAX request calls the AddBookmark.php file to store 
                    the bookmark into the bookmarks table using an insert into command and inserting the inputted values. In order to use the Edit and Delete 
                    functions, a bookmark must be selected first. Selecting a bookmark can be done by clicking on the bookmark list element, but not the link 
                    itself. A JavaScript function will give the selected element a css class to show that the element is highlighted. When a bookmark is selected, 
                    it's name and URL and loaded into the respective name and url textboxes and these values are also stored in duplicate hidden input boxes 
                    as a way of storing the old value in the case of an edit. If a bookmark is going to be edited, the values in the textbox can 
                    be modified and the edit bookmark button can be pressed. Pressing this button will check the URL to ensure that it is still valid (the same 
                    way that creating a bookmark validates the URL) and it opens the EditBookmark.php file. This file will perform an update command in the 
                    bookmarks table, using the old values from the hidden input boxes to get the row that needs to be updated and updates these values with the 
                    new values from the origin input boxes. Finally, there is the delete button. The delete button takes the currently selected list element and 
                    opens the DeleteBookmark.php file, which calls the DELETE command using two hidden input field that contain the name and URL to delete. This 
                    is done so only the selected item will be deleted and not a modified name or URL from the original unhidden input box. When the user logs out 
                    of SiteMark by pressing the Logout link, the session that contains the username of the currently logged in user is reset by making the session 
                    time out.
                </p>

                <hr />

                <span class="title2">Setup, Run, and Use Guide</span>
                <p class="title4">
                    The configuration for this project is using a MySQL database along with XAMPP for 
                    connecting the database and allowing PHP scripts to run. To run the PHP programs, start 
                    by opening XAMPP and start the Apache and MySQL modules. Afterwards, click the config 
                    button for Apache and find the &quot;DocuementRoot&quot; path. Change that path to the path 
                    where the project is located (these instructions can be found in the resources). The 
                    default path is &quot;C:/xampp/htdocs&quot;. After performing this change, restart the 
                    Apache service by stopping and starting it again. After, type local host in the browser and 
                    access the tma2.htm folder. All operations now operate on localhost instead of file:///. 
                    Do not open the tma2.htm file directly, or else the PHP files will not work correctly. They 
                    must be accessed through localhost. Another alternative is to put the project folder into the 
                    xampp/htdocs folder and change the index file so that you can access the file directory. From 
                    there, you can access the tma2.htm file.
                </p>

                <hr />

                <span class="title2">Resources</span>
                <p class="title4">
                    
                </p>
                <ul class="title4">
                    <li>
                        <a href="https://stackoverflow.com/questions/18902887/how-to-configuring-a-xampp-web-server-for-different-root-directory">
                            Changing XAMPP config folder (answer: insCode)
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/6515497/getting-cookie-value-from-php-form">
                            Change files if cookies exist
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/3922989/how-to-check-if-page-exists-using-javascript">
                            Check if page exists (answer: fwielstra)
                        </a>
                    </li>
                    <li>
                        <a href="http://php.net/manual/en/function.mysql-fetch-assoc.php">
                            Using mysql_fetch_assoc
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/6616539/post-ajax-data-to-php-and-return-data">
                            JS AJAX call
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/686155/remove-a-cookie">
                            Clearing a cookie
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url">
                            http(s) URL regular expression
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/41279524/xmlhttprequest-only-working-for-local-host">
                            Allowing http request from localhost
                        </a>
                    </li>
                </ul>
            </div>
            <div class="titleDiv" hidden>
                <span class="title1">__________ Documentation</span>
                <span class="title2">Original Description and Requirements (Part 2 - 70 marks)</span>
                <p class="title4">
                    In this part of the assignment, you are required to develop a small-scale online learning management 
                    system that can be used to deliver online courses to learners.
                </p>
                <p class="title4">
                    To that end, you will have to think about what these online courses are, how they can they be developed 
                    and how they should be stored on the web server, how they can be retrieved from the server, how they 
                    should be delivered to a web browser, and then rendered/presented properly on the web browser.
                </p>
                <p class="title4">
                    The development of online courses is the collaboration of efforts of subject matter experts (SMEs) and 
                    experts in computing and web technology. It is very common that those SMEs do not know much about 
                    computing, and don’t know how to use HTML and other web technologies needed to present an attractive 
                    course, but they should be quite comfortable with languages and terms used in education. So, the 
                    first technical step you need to take is to design a SME-friendly language for marking up educational 
                    materials, EML in our term (just another XML like you created for marking up your resume), for the 
                    SMEs to use. The EML you design may be a comprehensive one for marking up the contents for an entire 
                    course, or several languages in small scale for different components of a course. For example, you may 
                    have an EML for a lesson/lecture delivered in just a teaching/learning session, an EML for marking up 
                    quizzes, and an EML for marking up assignments, etc. You may look at some existing languages by 
                    searching for educational markup language in Google or other search engine.
                </p>
                <p class="title4">
                    After SMEs (for this assignment, you will be the SME) have written the course contents in your EML(s), 
                    the documents must be stored on the server before they can be delivered to the learners on the web. You 
                    may think that you can save each of the documents written in your EML as a file, like the resume file 
                    you wrote for assignment 1, but this is not practical. Files may work when there is just one or only a 
                    few learning documents, butwhen there are many, as happens in practical situations, the documents become 
                    unmanageable. That's why we need a database.
                </p>
                <p class="title4">
                    The next technical step is to design the database table or tables. Over the years, I have seen different 
                    designs from students in the course. The most simple and straightforward one is to have a single table. 
                    In the table each row contains information for a lesson or quiz, including the actual content written in 
                    your EML. To make the learning contents retrievable and manageable, you will need fields to identify the 
                    course and the unit the lesson or quiz belongs to. You may also keep the details of the courses and units 
                    in the same table for the purpose of this assignment project, though you wouldn't do that in practice 
                    because it is really inefficient; in a real world situation is to have separate tables to store information 
                    about courses and units.
                </p>
                <p class="title4">
                    To deliver the course contents (lessons and quizzes in our context), you will need to navigate through the 
                    database to find the right lesson or quiz that the learner has requested, and them retrieve the actual 
                    content in EML. For the content to be properly rendered or presented on learner's browser, you need to 
                    translate the content in your EML to HTML. We call this process parsing. Instead of using XSLT as you 
                    did for the first assignment, parsing EML to HTML needs to be done with PHP. So, the last important technical 
                    step for this project is to write a parser in PHP.
                </p>
                <p class="title4">
                    When doing this project, or any project for the assignments, you must take a system approach. That's why 
                    students are expected to have completed comp361 or a similar course on system analysis and design before 
                    taking this course.
                </p>
                <p class="title4">
                    The distribution of marks is as follows:
                </p>
                <ol class="title4">
                    <li>
                        <b>System analysis and design – 10 marks.</b>
                        <br />
                        Your analysis and design need to be presented in the assignment report. The details should include, but 
                        not be limited to, analysis of requirements, data flow, functional modules of learning management, the 
                        relationships of these modules, and system layout within browser’s window.
                    </li>
                    <li>
                        <b>Educational Markup language – 10 marks.</b>
                        <br />
                        Your educational markup language should be presented in the assignment report by showing all the tags and 
                        explanation of their intended purpose with examples.
                    </li>
                    <li>
                        <b>Database design – 10 marks.</b>
                        <br />
                        Database is used to store information about courses, units, lessons, quizzes, learners, and other learning 
                        object such as images, audio and video files, as well as actual learning contents written in your educational 
                        markup language. When designing database tables, you have to think about how that information and those actual 
                        data will be kept on the server.
                    </li>
                    <li>
                        <b>Parser – 10 marks.</b>
                        <br />
                        On the server side, the parser written in PHP parses the learning contents written in your EML taken from 
                        database into HTML documents that can be rendered by web browsers. Don’t be afraid of writing a parser for 
                        this purpose! It can be as simple as using some PHP regular expression functions to do pattern matching 
                        and string replacement.
                    </li>
                    <li>
                        <b>Learning Contents – 10 marks.</b>
                        <br />
                        Since you have written three tutorials or lessons for part 2 of your first assignment, you may take the 
                        contents from there, and rewrite them in your EML. You must have enough contents in your system, to make 
                        it a real web-based system.
                    </li>
                    <li>
                        <b>Quizzes – 10 marks.</b>
                        <br />
                        There should be an online quiz for each teaching lesson.
                    </li>
                    <li>
                        <b>Implementation – 10 marks.</b>
                        <br />
                        The system should be implemented and deployed on a web server, and accessible for your tutor to 
                        evaluate. The implementation includes the overall look-and-feel of the learning management system, 
                        essential components of such a web-based system, and the functionalities of online learning management.
                    </li>
                </ol>
                <p class="title4">
                    Save all files related to Part 2 in the directory TMA2/part2.
                </p>
                <p class="title4">
                    You must test your web applications developed for the assignment on your own server before you submit them 
                    and make the websites hosting the assignments and applications accessible for your tutor to evaluate. For 
                    your personal protection you should not put your student ID in any of the documents if hosted on an 
                    unprotected web site. After your tutor has finished the evaluation, you must remove all the assignment-related 
                    documents from the web site.
                </p>
                <p class="title4">
                    You must submit all the files under TMA2 in a zip package through Moodle.
                </p>
                <hr />
                
                <span class="title2">Interpretation of Description and Requirements</span>
                <p class="title4">
                    My interpretation of the requirements is that a web application is created to teach 
                    users about the basics of the technologies discussed in Units 1 through 3, using the
                    knowledge gained from these units (HTML, CSS, JavaScript, XML, and Ajax). I understand the
                    "banner to show off your work" as a bar on the webpage that will show the rest of the
                    applications in the network of web applications, including this web application. As well,
                    the banner should contain buttons or some sort of access to different sections of the tutorial 
                    information, as well as the quizzes. The welcome page to greet the users just displays what the
                    web application is about, and leads the user to the tutorials web application. Next, it looks
                    like what is expected from the application is that there are different sections that cover 
                    different units in the text, where there are at least 3 tutorials, covering some of the material
                    from Units 1, 2, and 3. As well, there should be a minimum of five page-structured elements and
                    six input types. These should be taught in the tutorials. As well, each tutorial should have a
                    quiz at the end of the quiz. The quiz should also be accessible on through navigation buttons,
                    so the same quiz should be accessible through either the end of the quiz or through the 
                    navigation menu. As well, the quiz system should be able to output the number of correct answers,
                    as well as the percentage correct. It doesn't talk about things such as showing the correct answer
                    and incorrect answer if the user selected the wrong answer, or randomizing the questions or
                    multiple choice questions, although these are definitely good enhancements for the future. Finally,
                    the quiz system should be created so questions could be easily added, removed, or edited, which
                    tells me that they want the place containing the information of the questions/answers to be
                    separate from the code. As well, all of the styling should be external for ease of CSS reuse and
                    having a consistent UI.
                </p>

                <hr />

                <span class="title2">Analysis and Design of the Web Application</span>
                <p class="title4">
                    The analysis of this web application is that the code should be able to display different sections
                    of information for different units. The &quot;banner&quot; will be split into two sections, where
                    one banner that spans the top of the page will provide links to the other applications in the network.
                    There will be a vertical section of the banner that spans the left side of the screen, which will
                    display navigation buttons related to the specific web application. In this case, the web application
                    is Learn The Web. Thus, there will be buttons on the side banner to navigate to different
                    units and to access different quizzes. The welcome page of the application will be the page that is
                    accessed first whenever a user tries to navigate to the Learn The Web application. This page will
                    contain some general information about the application including the purpose and what the users should 
                    be getting out of the application. This web page allow the users to access the application, which will 
                    be done using a button. Since there are tutorial sections and quiz sections, and that the quizzes should 
                    be accessible through the quizzes, then the same quiz should be accessed through a button on the navigation 
                    menu and from the bottom of the quiz. The button at the bottom of the quiz should link to the same spot 
                    as the navigation button. As well, it seems that the quiz system should be easily modified, which seems 
                    most easily done through containing all of the tutorial information and quiz information in XML. The different 
                    units will be contained in XML tags, which will then be converted into the appropriate HTML elements through 
                    the use of JavaScript. This is designed to make both the tutorials and quizzes easy to modify.
                </p>

                <hr />

                <span class="title2">Documentation of Implementation</span>                
                <p class="title4">
                    

                    There are two different EMLs for this assignment; one EML is used for describing the lessons, 
                    while the other lesson is an EML to describe the quizzes associated with each lesson. The EML
                    for the lessons is described using the following tags:
                </p>
                
                <ul class="title4">
                    <li>
                        <b>&lt;Overview&gt;&lt;/Overview&gt;</b> Describes the overview of the lesson, similar to 
                        an abstract for a technical document.
                    </li>
                    <li>
                        <b>&lt;Outline&gt;&lt;/Outline&gt;</b> A container inside the outline of topics associated with. 
                        Each Outline tag contains BulletPoint tags inside to specify each point for the outline.
                    </li>
                    <li>
                        <b>&lt;BulletPoint&gt;&lt;/BulletPoint&gt;</b> A bullet point inside of the outline.
                    </li>
                    <li>
                        <b>&lt;Introduction&gt;&lt;/Introduction&gt;</b> Is a brief paragraph providing some insight 
                        on what the lesson is about.
                    </li>
                    <li>
                        <b>&lt;Section&gt;&lt;/Section&gt;</b> Contains the section name inside the tag. The section 
                        contains a portion of the lesson describing a specific topic.
                    </li>
                    <li>
                        <b>&lt;Paragraph&gt;</b> Used to split the text of a section into different paragraphs for 
                        easier readability.
                    </li>
                    <li>
                        <b>&lt;Conclusion&gt;&lt;/Conclusion&gt;</b> The conclusion, or closing section of the lesson.
                    </li>
                    <li>
                        <b>&lt;Keyword&gt;&lt;/Keyword&gt;</b> A keyword tag is used to enclose a word or phrase, adding 
                        emphasis to the word or phrase by bolding the text.
                    </li>
                    <li>
                        <b>&lt;Image&gt;&lt;/Image&gt;</b> Used to define an image.
                    </li>
                    <li>
                        <b>&lt;Video&gt;&lt;/Video&gt;</b> Used to define a video.
                    </li>
                    <li>
                        <b>&lt;Audio&gt;&lt;/Audio&gt;</b> Used to define an audio file.
                    </li>
                </ul>

                <p class="title4">
                    Following the EML for lessons, there is also an EML for quizzes, which is used to define a question, 
                    possible multiple choice answers, and the correct answer. The tags are described as follows:
                </p>

                <ul class="title4">
                    <li>
                        <b>&lt;Question&gt;&lt;/Question&gt;</b> Defines the question for the quiz. Include the question
                        number within the tags
                    </li>
                    <li>
                        <b>&lt;Answer&gt;&lt;/Answer&gt;</b>Defines an incorrect answer to the question. Each answer 
                        is following a question is associated with the question.
                    </li>
                    <li>
                        <b>&lt;CorrectAnswer&gt;&lt;/CorrectAnswer&gt;</b> Similar to an answer, but specifies the correct 
                        answer to the question
                    </li>
                </ul>

                <hr />

                <span class="title2">Setup, Run, and Use Guide</span>
                <p class="title4">
                    The setup required for this application requires that the WelcomeToLearnTheWeb.html, LearnTheWeb.html, LearnTheWeb.js, 
                    and Units.xml files exist in the part2 folder. As well, ensure that there are .png images within the part2 folder, as they are 
                    used to display some images throughout the tutorial. To run the program, simply access the WelcomeToLearnTheWeb.html file directly 
                    or through the network of web applications. Proceed into the application and read the material in each unit. When the user 
                    has read the information, they can choose to take the quiz at the bottom of the unit, or move on and access the quiz at anytime 
                    on the side navigation menu or at the bottom of the quiz. In the quiz, answer each question and press submit to see the final score.
                </p>

                <span class="title2">Resources</span>
                <p class="title4">
                    
                </p>
                <ul class="title4">
                    <li>
                        <a href="https://www.w3schools.com/php/php_mysql_select.asp">
                            Get a result from a select query using mysql_fetch_assoc
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/1609947/regex-for-replacing-a-single-quote-with-two-single-quotes">
                            String replace single quotes
                        </a>
                    </li>
                    <li>
                        <a href="http://php.net/manual/en/function.mysql-insert-id.php">
                            Getting the last inserted ID in PHP
                        </a>
                    </li>
                    <li>
                        <a href="http://blog.teamtreehouse.com/uploading-files-ajax">
                            Upload files to MySQL database
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/4438551/maximum-number-of-allowable-file-uploads-has-been-exceeded">
                            Increasing maximum number of files to upload and maximum upload size limit
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/2126833/php-regex-how-to-replace-part-of-a-found-pattern-but-leaving-the-rest-as-it-is">
                            Capture groups and replacing parts of a string with Regex
                        </a>
                    </li>
                    <li>
                        <a href="https://regex101.com/">
                            Regex helper and tester
                        </a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="titleDiv" hidden>
            <span class="title1">Note for the Instructor</span>
            <p class="title4">
                mysql -h localhost -u root
                USE mysql;
                create user 'iw3htp'@'localhost' identified by 'password';
                grant select, insert, update, delete, create, drop, references,
                execute on *.* to 'iw3htp'@'localhost';
                mysql -h localhost -u iw3htp -p

                ---

                CREATE DATABASE users;
                USE users;

                CREATE TABLE credentials (
                    username VARCHAR(30) NOT NULL , 
                    password VARCHAR(30) NOT NULL,
                    PRIMARY KEY(username));
                CREATE TABLE bookmarks (
                    username VARCHAR(30) NOT NULL , 
                    url VARCHAR(30) NOT NULL,
                    FOREIGN KEY (username) REFERENCES credentials(username),
                    UNIQUE (username, url));
            </p>
        </div>
    </body>
</html>