<?xml version="1.0"?>

    Web Development

    Unit 1 - HTML

    HTML Part 1 - Page Structure Elements

    <Overview>
        This lesson is on the topic of HTML and provides a brief introduction to what HTML is, the purpose of HTML, 
        as well as some of the basic HTML elements that can be used to create simple webpages or web forms. By the 
        end of this lesson, you should be able to:
        <Outline>
            <BulletPoint>
                Define what HTML stands for and what it's use is.
            </BulletPoint>
            <BulletPoint>
                Create basic page structure elements such as Paragraphs, tables, divs, anchors, and list elements.
            </BulletPoint>
            <BulletPoint>
                Create nested lists.
            </BulletPoint>
        </Outline>
    </Overview>
    <Introduction>
        HTML is a markup language that resides on the client-side. HTML is a fundamental language used to create and 
        format any webpages that you would see on when you browse the internet. It is important to learn and understand 
        how to utilize HTML in order to design proper and elegant web pages.
    </Introduction>
    <Section>1.1 An Introduction to HTML Structure Elements</Section>
    <Paragraph>
        HTML (HyperText Markup Language) is used to create elements that the user interacts with. Since HTML is a
        Markup language, it is used to define the content and structure of the webpage. These contents act to display
        information from a server, or to receive inputs from the user to send to a server for processing. HTML is the
        front-end side (or Top tier) of the three-tier architecture. The three-tier architecture is used to help
        define a separation of logic between the front-end and the back-end, where the tiers are called Top Tier
        (or User Interface Tier or Client Tier), the Middle Tier (or Business Logic Tier), and the Bottom Tier
        (or Data Tier or Information Tier).
    </Paragraph>
    <Paragraph>
        HTML elements can appear differently depending on the browser used, as well as the browser version. Thus,
        it is important to ensure that the elements being added into your application are compatible with a majority
        of the web browsers. This will help ensure that everyone can use the application as it was intended and not
        miss out on any features that you add in. To help with this, there are websites that can help compare and
        contrast between different browsers to see which browsers can utilize which HTML elements. Some of them
        are Html5Test.com and CanIUse.com
    </Paragraph>
    <Paragraph>
        In this unit, we will be looking at a couple of page-structure elements, and in the next unit, we will look at
        some different input types that are available in HTML5. So in this chapter, we will be looking at the
        following page-structure elements: paragraph, table, div, a, and ul/ol/li elements.
    </Paragraph>
    <Paragraph>
        A quick note in regards to HTML elements is that each element can be given an unique ID (specified by the ID attribute).
        The id can be used to identify a specific element on a page (each ID must be different on one given page). As well, CSS
        attributes can be applied directly to an element with the specified ID. There will be more discussion on this later on.
    </Paragraph>
    <Section>1.2 Paragraph Element</Section>
    <Paragraph>
        In HTML, there exists a paragraph element, which can be created by using the <Image filename="1.2_1.png" description="<p> tags"> tag. 
        Paragraphs are used to display text that the programmer wants the end-user to see. It helps with defining a structure for the document.
    </Paragraph>
    <Paragraph>
        Here is an example of a couple of paragraph elements displayed over eachother.
    </Paragraph>
    <Image filename="paragraph.png" description="Picture of two Paragraph elements">
    <Image filename="paragraph_code.png" description="<p>This is a paragraph</p><p>This is another paragraph</p>">
    <Section>1.3 Table Element</Section>
    <Paragraph>
        A table element is very useful for formatting data output and displaying tabular data. Tables begin by using the
        <table></table> tag. This will create the outer boundary that contains the table. The rows of the
        table can be created using the <tr></tr> tags, which stands for "table row". Each of these tags that
        are specified within a table element will create a new row. To create columns, the <td></td> tag
        can be used. The "td" tag stands for "table data"
    </Paragraph>
    <Paragraph>
        Here is an example of a table creation, with 3 rows and 4 columns
            <table>
            <tr>
                <td>1</td>
                <td>2</td>
                <td>3</td>
                <td>4</td>
            </tr>
            <tr>
                <td>5</td>
                <td>6</td>
                <td>7</td>
                <td>8</td>
            </tr>
            <tr>
                <td>9</td>
                <td>10</td>
                <td>11</td>
                <td>12</td>
            </tr>
        </table>
    </Paragraph>
    <Image filename="table_code.png" description="
        <table>
            <tr>
                <td>1</td>
                <td>2</td>
                <td>3</td>
                <td>4</td>
            </tr>
            <tr>
                <td>5</td>
                <td>6</td>
                <td>7</td>
                <td>8</td>
            </tr>
            <tr>
                <td>9</td>
                <td>10</td>
                <td>11</td>
                <td>12</td>
            </tr>
        </table>
    ">
    <Section>1.4 Div Element</Section>
    <Paragraph>
        A div element can be used to separate portions of the web page. A div is block-level element, meaning it has its own
        padding, border, and margin spacing around the div's content. A div element can contain any other html elements
        within it.
    </Paragraph>
    <Paragraph>
        Here's an example of a div element with a paragraph inside of it. The div will have a 1px padding on the left and a 10px
        padding on the right, with a blue dotted border.
    </Paragraph>
        <Image filename="div.png" description="
        A div with a paragraph, where the div has a 1px left padding, 10px right padding, a width of 100px, and a blue dotted border
        "> 
    <Image filename="div_code.png" description="
        <div> with padding-left:1px, padding-right:10px, border-style:dotted, border-color:blue, width:100px, and height:100px properties
        with a <p> element inside
    ">
    <Section>1.5 Anchor Element</Section>
    <Paragraph>
        The anchor element can contain a link  that will redirect the user to the specified http address. The address can be
        specified in the href attribute of the a element. Text can be placed between the start and end tags to create a
        hyperlinked text (generally denoted with blue text and an underline beneath the text). Clicking the link will
        change the color of the text to purple, denoting that the site had been visited before. CSS styles can be used
        to change these behaviours, but they will be discussed later on.
    </Paragraph>
    <Paragraph>
        Here's an example of an anchor element before and after it was clicked.
        <a href="#">Anchor Element</a>
    </Paragraph>
    <Image filename="a_before.png" description="Anchor element before it was clicked (text is blue)">
    <Image filename="a_after.png" description="Anchor element after it was clicked (text is purple)">
    <Image filename="a_code.png" description="
        <a> element with Anchor Element as the text
    ">
    <Section>1.6 Lists</Section>
    <Paragraph>
        Lists are used to order and more neatly display information. There are two kinds of lists that are available in HTML. Lists can
        be displayed as either ordered or unordered lists. The difference is that ordered lists have an increasing index starting from one,
        while the unordered list has bullet points for each element. Ordered Lists are created using the ol element, while unordered lists
        use the ul element. The points inside these lists are created using the li element.
    </Paragraph>
    <Paragraph>Here is an example of an ordered list using the ol element.</Paragraph>
    <Paragraph>
        <ol>
            <li>Element 1</li>
            <li>Element 2</li>
            <li>Element 3</li>
        </ol>
    </Paragraph>
    <Image filename="orderedlist_code.png" description="
        <ol>
            <li>Element 1</li>
            <li>Element 2</li>
            <li>Element 3</li>
        </ol>
    ">
    <Paragraph>The same ordered list can be changed into an unordered list by replacing the ol element with a ul element, as shown below.</Paragraph>
    <Paragraph>
        <ul>
            <li>Element 1</li>
            <li>Element 2</li>
            <li>Element 3</li>
        </ul>
    </Paragraph>
    <Image filename="unorderedlist_code.png" description="
        <ul>
            <li>Element 1</li>
            <li>Element 2</li>
            <li>Element 3</li>
        </ul>
    ">
    <Paragraph>
        Lists can also be nested inside eachother, called a nested list. Different lists can be nested within eachother, such as having an
        ordered list nested inside an unordered list, and vice-versa. This is done the same way as creating a list, but ol and ul lists are
        created within li element. Any number of lists can be nested within eachother. Here's an example of an unordered list nested inside an 
        ordered list, which is nested inside another unordered list.
    </Paragraph>
    <Paragraph>
        <ul>
            <li>Element 1</li>
            <li>Element 2</li>
            <li> Ordered Nested List
                <ol>
                    <li>Ordered Nested Element 1</li>
                    <li>Ordered Nested Element 2</li>
                    <li> Unordered Nested List
                        <ul>
                            <li>Unordered Nested Element 1</li>
                            <li>Unordered Nested Element 2</li>
                            <li>Unordered Nested Element 3</li>
                        </ul>
                    </li>
                    <li>Ordered Nested Element 3</li>
                </ol>
            </li>
            <li>Element 3</li>
        </ul>
    </Paragraph>
    <Image filename="nestedlist_code.png" description="
        <ul>
            <li>Element 1</li>
            <li>Element 2</li>
            <li> Ordered Nested List
                <ol>
                    <li>Ordered Nested Element 1</li>
                    <li>Ordered Nested Element 2</li>
                    <li> Unordered Nested List
                        <ul>
                            <li>Unordered Nested Element 1</li>
                            <li>Unordered Nested Element 2</li>
                            <li>Unordered Nested Element 3</li>
                        </ul>
                    </li>
                    <li>Ordered Nested Element 3</li>
                </ol>
            </li>
            <li>Element 3</li>
        </ul>
    ">
    <Question name="Question1">Question 1. What kind of language is HTML?</Question>
        <Answer name="Question1" correct="">A. Scripting Language</Answer>
        <Answer name="Question1" correct="*">B. Markup Language</Answer>
        <Answer name="Question1" correct="">C. XML-based Language</Answer>
        <Answer name="Question1" correct="">D. Visual Language</Answer>
    <Question name="Question2">Question 2. A paragraph is defined using the ___ tag</Question>
        <Answer name="Question2" correct="*">A. p</Answer>
        <Answer name="Question2" correct="">B. para</Answer>
        <Answer name="Question2" correct="">C. paragraph</Answer>
        <Answer name="Question2" correct="">D. p1</Answer>
    <Question name="Question3">Question 3. How is a row created in an HTML table?</Question>
        <Answer name="Question3" correct="*">A. Using the &quot;tr&quot; tag</Answer>
        <Answer name="Question3" correct="">B. Using the &quot;td&quot; tag</Answer>
        <Answer name="Question3" correct="">C. Using the &quot;row&quot; tag</Answer>
        <Answer name="Question3" correct="">D. Using the &quot;tableRow&quot; tag</Answer>
    <Question name="Question4">Question 4. What happens if a nested list is not inside an &quot;li&quot; element?</Question>
        <Answer name="Question4" correct="">A. The HTML page gets an error and does not render</Answer>
        <Answer name="Question4" correct="">B. The HTML page renders but the nested list does not</Answer>
        <Answer name="Question4" correct="">C. The output is the same as if the list was inside an &quot;li&quot; element</Answer>
        <Answer name="Question4" correct="*">D. Every subsequent &quot;li&quot; element is nested under the nested list</Answer>
    <Question name="Question5">Question 5. What is an HTML ID used for?</Question>
        <Answer name="Question5" correct="*">A. Uniquely identifying an HTML element</Answer>
        <Answer name="Question5" correct="">B. Applying CSS to elements on the same page with the same ID</Answer>
        <Answer name="Question5" correct="">C. Both A and B</Answer>
        <Answer name="Question5" correct="">D. None of the Above</Answer>


    HTML Part 2 - Input Elements

    <Overview>
        This lesson is on the topic of HTML and provides a brief introduction to some of the Input elements that are available in 
        HTML. These elements are importatnt in creating interactive web pages and allowing the user to send inputs and interact 
        with the server where the web page resides. By the end of this lesson, you should be able to:
        <Outline>
            <BulletPoint>
                Define what a range input, color input, date input, email input, number input, and tel input are and how to use them.
            </BulletPoint>
            <BulletPoint>
                Modify and configur the inputs to be properly match it's use in a web page
            </BulletPoint>
        </Outline>
    </Overview>
    <Introduction>
        HTML web pages only become interactive once HTML input elements are involved. These elements are key in extracting data and processing 
        things such as forms, user credentials for logging in, and performing searches on databases depending on your search topic.
    </Introduction>
    <Section>2.1 An Introduction to HTML Input Elements"</Section>
    <Paragraph>
        Now that you have some basic information on some HTML structure elements, it's time to investigate another important realm of
        HTML, which are the input elements. These elements allow the user to provide data to the backend for processing. Generally, a
        majority of input elements can be seen in forms, where the user enters some sensitive data that is used to query a database.
        An example of this would be when someone is filling out registration information to sign up on a social media platform. Most
        likely, you will be asked to fill in your First Name, Last Name, Date of Birth, Email Address, and Password. All of these inputs
        use the HTML input elements that will be discussed. The inputs are also defined using the input tag
    </Paragraph>
    <Paragraph>
        <input type=&quot;&quot; />
    </Paragraph>
    <Paragraph>    
        There are other forms of inputs that are different than text inputs, such as range, color, date, email, number, search, and tel.
        These different input forms can be created by filling in the value of the type attribute, seen inside of the input tag.
    </Paragraph>
    <Section>2.2 Range Input</Section>
    <Paragraph>
            The input of type range creates a slider control. The slider has a max, min, step, and initial value that can be modified using the
            element's attributes (max, min, step, and value respectively). As well, the starting location of the slider can be specified with the value attribute. 
            A slider is self-validating, as the only viable values are the ones in the range of the specified maximum and minimum.
    </Paragraph>
    <Paragraph>
        Here's an example of a range input, where the maximum value is 100, the minimum value is 12, and the starting value is 51.
        Note that in this example, the range input is enclosed by a label to define display the maximum and minimum values.
    </Paragraph>
    <Paragraph>
        <label>
            12<input type="range" max="100" min="12" value="51" />100
        </label>
    </Paragraph>
    <Image filename="rangeInput_code.png" description="
        An input element of type range with a max value of 100, min value of 12, and starting value of 51
    ">
    <Section>2.3 Color Input</Section>
    <Paragraph>
        The input of type color allows for the user to access a color picker dialog box. The dialog box is accessible by clicking
        the "button" that the input element creates. This "button" also shows the color that the user has chosen (default to black)
        The color picker dialog is the standard windows dialog that shows up if you were to use somthing like Microsoft Paint.
        After the user selects a color and presses the "OK" button, the dialog will close and the user selected color will be
        displayed in the input element.
    </Paragraph>
    <Paragraph>
        Here's an example of how to create an HTML color picker.
    </Paragraph>
    <Image filename="color_input_before.png" description="The  input of type color before a color is selected (default to black)">
    <Paragraph>
        The above image shows the color input type before the user has specified a color
    </Paragraph>
    <Image filename="color_input_dialog.png" description="The color picker dialog with the selected color as cyan">
    <Paragraph>
        The above image shows the color picker dialog that is displayed when the input element is pressed
    </Paragraph>
    <Image filename="color_input_after.png" description="The  input of type color after a color is selected (cyan)">
    <Paragraph>
        The above image shows the color input type after the user has specified a color (color seen in the previous image) 
    </Paragraph>
    <Image filename="color_input_code.png" description="
        An <input> tag of type color
    ">
    <Section>2.4 Date Input</Section>
    <Paragraph>
        The input of type date creates an input textbox that allows the user to update the date values in multiple ways.
        First, the user can directly update the date by typing into box in the respective fields (year, month, and day).
        Another way is by clicking into a field and pressing the up and down arrows on the spinner controls.
        The last way is by clicking an arrow next to the spinners that opens up a calendar, allowing the user to select the date
        from there. Note that the last two ways are not shown in Firefox or IE12 or earlier browsers.
    </Paragraph>
    <Paragraph>
        Here's an example of how to create a date input element.
    </Paragraph>
    <Paragraph><input type="date" /></Paragraph>
    <Paragraph>
        The above element shows the date input with not date inputted.
    </Paragraph>
    <Image filename="date_input_code.png" description="
        An <input> tag of type date
    ">
    <Section>2.5 Email Input</Section>
    <Paragraph>
        The input of type email creates an input text box that expects text in an email format. The input text box will verify 
        if the input is in a correct email format when the form is submitted, but will not check if the email exists or not. It
        is also possible for the input to accept multiple emails (separated by commas), if the multiple attribute is specified.
    </Paragraph>
    <Paragraph>
        Here's an example of how to create an email input, and what it looks like if the form is to be submitted with an invalid
        email format (or is submitted empty (the required attribute forces a value to be inputted into the input)).
    </Paragraph>
    <Paragraph><input type="email" multiple required/></Paragraph>
    <Paragraph>
        The above element is an email input. Entering an invalid format email hightlight the input box red, while
        entering a valid email (ex. email@email.com) will not.</Paragraph>
    <Image filename="email_input_invalid.png" description="An invalid email being submitted">
    <Paragraph>
        The above image shows an invalid popup message when an invalid email is trying to be submitted. The input box is
        hightligted in red if the email is invalid
    </Paragraph>
    <Image filename="email_input_code.png" description="
        An <input> tag of type email with the multiple and required attributes set
    ">
    <Section>2.6 Number Input</Section>
    <Paragraph>
        The number input allows the user to input a numeric value with type checking. It ensures that the user's input is a valid number.
        As well, the input allows the developer to specify a minimum and maximum valid input range, which is useful for limiting the user's
        valid inputs. This is done by setting the min attribute and the max attribute, respectively. There is also a spinner that is 
        available to increase or decrease the user's value by a step amount, which can also be specified by the developer. Setting the
        step attribute will change how much the spinner increments and decrements the numeric value. 
    </Paragraph>
    <Paragraph>Here is an example of a number input, with a minimum of 5, maximum of 25, and a step of 2.</Paragraph>
    <Paragraph><input type="number" min="5" max="25" step="2" /></Paragraph>
    <Image filename="number_input_code.png" description=" 
        An <input> tage of type number, with a minimum value of 5, maximum value of 25, and step rate of 2
    ">
    <Paragraph>
        If a number is submitted with a non-numeric value, or a value outside of the specified range, the user will be notified.
        Here's an example, using the above example, when the user inputs a value outside of the valid range.
    </Paragraph>
    <Image filename="number_input_invalid.png" description="
        Inputting a value of 2566 when the maximum allowed numeric value is 25. User gets prompted by a message stating
        "Please select a value that is no more than 25."
    ">                    
    <Section>2.7 Search Input</Section>
    <Paragraph>
        The search input creates a text box search field that allows the user to input text for a query. There is also
        an "x" that will clear the search box. As well, the placeholder attribute can be set to a text string to display
        placeholder text within the search box.
    </Paragraph>
    <Paragraph>Here's an example of a search input.</Paragraph>
    <Paragraph><input type="search" placeholder="Enter Query Here."/></Paragraph>
    <Image filename="search_input_code.png" description="
        A <search> tag with a placeholder attribute saying Enter Query Here.
    ">
    <Section>2.8 Tel Input</Section>
    <Paragraph>
        The tel input type is used for telephone number inputs. The tel input doesn't validate if the inputted telephone number is
        a real, valid number, but it does provide a pattern attribute to allow the developer to specify regular expressions (regex)
        to test for a correct telephone input format. This is done because different regions have different telephone number formats.
        This allows the tel input to be modified to suit any region. Once again, there is also a placeholder attribute to display
        the required telephone input format
    </Paragraph>
    <Paragraph>Here's an example of a tel input for a Canadian phone number format (###) ###-####.</Paragraph>
    <Paragraph>
        <input type="tel" placeholder="(###) ###-####" pattern="\([0-9]{3}\) [0-9]{3}-[0-9]{4}">
    </Paragraph>
    <Image filename="tel_input_code.png" description="
        An <input> tag of type tel, with placeholder text showing a standard phone number format and a pattern for reading 
        a proper telephone number format.
    ">
    <Paragraph>The error message for trying to submit a tel input that doesn't match the regex patter will be similar to the image seen below.</Paragraph>
    <Image filename="tel_input_invalid.png" description="
        Error message for inputting a telephone number of the incorrect format.
    ">


    <Question name="Question1">Question 1. The starting value of a Range Input can be specified with the ___ attribute</Question>
        <Answer name="Question1" correct="">A. start</Answer>
        <Answer name="Question1" correct="">B. step</Answer>
        <Answer name="Question1" correct="*">C. value</Answer>
        <Answer name="Question1" correct="">D. begin</Answer>
    <Question name="Question2">Question 2. Multiple emails inside an email input are separated by </Question>
        <Answer name="Question2" correct="">A. Asterisk</Answer>
        <Answer name="Question2" correct="">B. Semi-Colons</Answer>
        <Answer name="Question2" correct="">C. Spaces</Answer>
        <Answer name="Question2" correct="*">D. Commas</Answer>
    <Question name="Question3">Question 3. Consider a Number Input with a minimum value of 3, maximum value of 11, starting value of 4, and step value of 9.
                        What happens when the up arrow on the spinner is pressed?</Question>
        <Answer name="Question3" correct="">A. 11</Answer>
        <Answer name="Question3" correct="">B. 9</Answer>
        <Answer name="Question3" correct="*">C. 4</Answer>
        <Answer name="Question3" correct="">D. NaN</Answer>
    <Question name="Question4">Question 4. What do the Tel Input and Email Input have in common?</Question>
        <Answer name="Question4" correct="*">A. They both do not validate if the input exists</Answer>
        <Answer name="Question4" correct="">B. They both validate if the input exists</Answer>
        <Answer name="Question4" correct="">C. Both inputs can accept multiple inputs, separated by spaces</Answer>
        <Answer name="Question4" correct="">D. Both A and C</Answer>
    <Question name="Question5">Question 5. Why is a Range Input self-validating?</Question>
        <Answer name="Question5" correct="">A. The slider checks its current value to see if it is outside of the range and corrects itself</Answer>
        <Answer name="Question5" correct="*">B. The slider cannot move outside of the valid range</Answer>
        <Answer name="Question5" correct="">C. The slider can only move within the min and max range exclusively (never reach the min or max value)</Answer>
        <Answer name="Question5" correct="">D. None of the Above</Answer>

    HTML Part 3 - Image, Video and Audio files

    <Overview>
        This lesson will discuss how to create image, video, and audio files in HTML, as well as display some examples of each.
        By the end of this lesson, you should be able to: 
        <Outline>
            <BulletPoint>
                Create an image and display it on the web page
            </BulletPoint>
            <BulletPoint>
                Create an audio element with controls and be able to hear audio
            </BulletPoint>
            <BulletPoint>
                Create a video element with controls and be able to watch the video
            </BulletPoint>
        </Outline>
    </Overview>
    <Introduction>
        It is important to be able to create image, video, and audio elements in HTML because it adds to the interactive experience of a webpage. 
        It allows for more interactive webpages and adds to the visual aspect of the page.
    </Introduction>
    <Section>3.1 General Attribute</Section>
    <Paragraph>
        Each of these elements have an src attribute that despecifies which location of the image, video, or audio files. This attribute specifies
        the location of the file, which is required to displa the image, video, or audio file properly.
    </Paragraph>
    <Section>3.2 How to Create an Image File</Section>
    <Paragraph>
        An image file displays a simple image on the webpage. Web browsers support various image types, such as jpeg, png, and more. 
        Creating an image file is done with the image tag. There is an optional alt attribute that specifies the text that is displayed if the 
        file is not available. This attribute is important as a backup in case the image is not available.
    </Paragraph>
    <Paragraph>
        An example of an image file being displayed is the one below
    </Paragraph>
    <Image filename="bobcat.jpg" description="A picture of a baby bobcat in a tree">
    <Section>3.3 How to Create Video and Audio Files</Section>
    <Paragraph>
        Video and Audio elements are created in a similar way. The Video element is created with the video tag and the audio element is created with 
        the audio tag. Both elements require a source tag within their tags. The source tag contains a type attribute specifying what type the 
        video or audio file is. For a video, it can have an attribute type="video/mp4" and audio can have a type attribute type="audio/mpeg". 
        The video tag can also take in a width and height attribute that specify the width and height of the video file. Both the video and audio 
        files can have a control attribute set to add control elements to the video or audio element that allows for stopping and playing of the 
        elements. 
    </Paragraph>
    <Paragraph>
        Here's an example of a video file
    </Paragraph>
    <Video filename="video.mp4">

    <Paragraph>
        Here's an example of an audio file
    </Paragraph>
    <Audio filename="sound.mp3">

    <Question name="Question1">Question 1. What is used to display a video?</Question>
        <Answer name="Question1" correct="*">A. video tag with a source tag inside</Answer>
        <Answer name="Question1" correct="">B. Video tag with a src tag inside</Answer>
        <Answer name="Question1" correct="">C. movie tag with a source tag inside</Answer>
        <Answer name="Question1" correct="">D. Movie tag with a src tag inside</Answer>
    <Question name="Question2">Question 2. Which element has src attribute within its main tag (ie. not a child tag)?</Question>
        <Answer name="Question2" correct="">A. video</Answer>
        <Answer name="Question2" correct="">B. audio</Answer>
        <Answer name="Question2" correct="*">C. image</Answer>
        <Answer name="Question2" correct="">D. All of the Above</Answer>
    <Question name="Question3">Question 3. The alt attribute is used in which element tag?</Question>
        <Answer name="Question3" correct="*">A. image</Answer>
        <Answer name="Question3" correct="">B. video</Answer>
        <Answer name="Question3" correct="">C. audio</Answer>
        <Answer name="Question3" correct="">D. source</Answer>

    Unit 2 -CSS

    Creating and Utilizing CSS

    <Overview>
        This lesson is on the topic of CSS and briefly discusses why CSS is important, along with the different ways that CSS can be 
        integrated with an HTML webpage. By the end of this lesson, you should be able to: 
        <Outline>
            <BulletPoint>
                Define what CSS stands for and what it's use is.
            </BulletPoint>
            <BulletPoint>
                Understand what a CSS rule-set is and how to create one
            </BulletPoint>
            <BulletPoint>
                Know the three different ways that CSS rule-sets can be applied to an HTML webpage
            </BulletPoint>
            <BulletPoint>
                Know the drawbacks that come with the different ways to apply CSS rule-sets
            </BulletPoint>
        </Outline>
    </Overview>
    <Introduction>
        CSS is a style sheet language that is used in the client-side, alongside the HTML markup language. CSS is important for formatting 
        HTML elements to be in correct position on the webpage, as well as make the webpage more aesthetically pleasing for the users. It can 
        allow the developer to change the colors and styles of just about any HTML elements!
    </Introduction>
    <Section>4.1 What is CSS?</Section>
    <Paragraph>
        CSS (Cascading Style-sheet) is a style sheet language used to style HTML elements. CSS helps in creating aesthetically pleasing
        web pages by allowing the developer to color structural elements, input elements, and just about anything else HTML related. It also
        helps to layout the web application, as it can specify the sizes of of HTML elements. In turn, this means that CSS also helps
        with the scalability of web applications on smaller and larger devices (such as scaling down from a desktop browser on a large screen,
        to a mobile browser on a cellular device. Thus, it is obvious that CSS is an important aspect of web development.
    </Paragraph>
    <Section>4.2 Inline CSS vs. an External Stylesheet</Section>
    <Paragraph>
        There are two ways to modify HTML elements using CSS. The first way is through the use of inline css in the HTML elements.
        This is where the CSS styles are applied directly to the HTML element (the HTML style attributes are modified directly in the
        creation of the HTML element). An example of what this would look like on a div element would be:
    </Paragraph>
    <Image filename="css_3-2.png" description="A div with a blue background">
    <Image filename="css_3-2_code.png" description="
        A <div> element with inline css styling making it have a width and height of 200px and a background color of blue
    ">
    <Paragraph>
        As shown here, there is an attribute in the HTML div starting tag called style, and when that attribute is in place, CSS code
        can be written to directly modify this element.
    </Paragraph>
    <Paragraph>
        Using inline HTML may not be of best practice, as it can cause a lot of duplicated code (if multiple elements want to be styled
        the same way), leading to a lack in maintainability and consistancy. What I mean by maintainability and consistancy is, is if there
        are multiple webpages in which the same theme needs to be applied to all of the pages, then it becomes a tedious and
        inefficient to style each and every element with the same styles.
    </Paragraph>
    <Paragraph>
        A more reasonable approach would be to use an external CSS stylesheet, which can be used to create a common style for certain
        elements or certain groups of elements. This can be done in one of two ways. In the first method, a "style" element
        (<Image filename="3.2_2.png" description="<style> tags">) can be declared inside the HTML document that will allow for CSS styling
        for a specific HTML file. This solution is better than the inline CSS, but still not the best, since the CSS code would need to
        be duplicated in other HTML files as well. The best way is to use a separate CSS file (of type .css), where the stylesheet can be
        referenced in each HTML file (using <link rel="stylesheet" type="text/css" href="yourstylesheet.css" />). Discussing some of
        the attributes in the link tag, rel describes the relationship between the current document and the linked document, type defines 
        the MIME type as a text with CSS formatting, and the href is the direct reference to the stylesheet. Thus, any HTML files that have 
        the reference can use the CSS rule-set specified in the CSS file.
    </Paragraph>

    <Section>4.3 Using External CSS Stylesheets</Section>
    <Paragraph>
        First, let's begin be defining a CSS rule-set for an HTML element. As stated in the previous unit, HTML elements can be given unique IDs. 
        In CSS, styles can be applied directly to an HTML element with a specific ID. For example, if there is an element declared as
        <Image filename="3.3_1.png" description="Using <div> tag with an id attribute">
        and we wanted to set the background color to red, it can be done in the CSS stylesheet as #myDiv { background-color:red; }. 
        Notice how the div's ID was preceded by a '#'. The # symbol specifies that the CSS properties will be applied to an elements with that specific 
        ID. Now let's say we wanted to apply the CSS properties to multiple HTML elements. A rule-set can be made similarly to how the rule-set 
        was made for an ID, but replacing the '#' with a '.' (so using the above example, it would look like .myDiv { background-color:red; }). 
        This rule-set can be applied to any HTML element by using the class attribute (so in the above div, it would be 
        <Image filename="3.3_2.png" description="Using <div> tag with a class attribute">.
        Multiple CSS classes can be applied to an element. If you want CSS rule-sets to be applied to a certain HTML elements (such as applying the CSS 
        rule-set to all div elements), then specify the HTML element name with nothing preceding it (so once again, for a div element it would look 
        like div { background-color:red; } to apply a red background to all div's).
    </Paragraph>


    <Question name="Question1">Question 1. CSS is used to</Question>
        <Answer name="Question1" correct="">A. Define HTML elements</Answer>
        <Answer name="Question1" correct="">B. Create JavaScript objects</Answer>
        <Answer name="Question1" correct="*">C. Style HTML elements</Answer>
        <Answer name="Question1" correct="">D. Create attributes for JavaScript objects</Answer>
    <Question name="Question2">Question 2. Why is it considered bad to use inline HTML?</Question>
        <Answer name="Question2" correct="">A. Because it makes it difficult to change themes of web pages</Answer>
        <Answer name="Question2" correct="">B. There is duplicate CSS code for HTML element that should be styled the same</Answer>
        <Answer name="Question2" correct="">C. CSS code becomes less maintainable</Answer>
        <Answer name="Question2" correct="*">D. All of the Above</Answer>
    <Question name="Question3">Question 3. CSS styles an HTML element by ID by preceding the ID with a </Question>
        <Answer name="Question3" correct="*">A. &quot;#&quot;</Answer>
        <Answer name="Question3" correct="">B. &quot;.&quot;</Answer>
        <Answer name="Question3" correct="">C. &quot;>&quot;</Answer>
        <Answer name="Question3" correct="">D. &quot;&amp;&quot;</Answer>
    <Question name="Question4">Question 4. CSS is considered a </Question>
        <Answer name="Question4" correct="*">A. Style Sheet Language</Answer>
        <Answer name="Question4" correct="">B. Scripting Language</Answer>
        <Answer name="Question4" correct="">C. Markup Language</Answer>
        <Answer name="Question4" correct="">D. Declarative Language</Answer>
    <Question name="Question5">Question 5. Where can CSS code reside?</Question>
        <Answer name="Question5" correct="">A. In HTML elements</Answer>
        <Answer name="Question5" correct="">B. In an HTML style element</Answer>
        <Answer name="Question5" correct="">C. Outside of a HTML style element</Answer>
        <Answer name="Question5" correct="*">D. Both A and B</Answer>


    Unit 3 - JavaScript and AJAX

    Improving Webpages with JavaScript and AJAX

    <Overview>
        In this lesson, we will be discussing what JavaScript and AJAX are, as well as their importance in creating dynamic and responsive 
        webpages that improve usability and creates a better user experience. By the end of this lesson, you should be able to: 
        <Outline>
            <BulletPoint>
                Define what Javascript is and understand it's uses 
            </BulletPoint>
            <BulletPoint>
                Understand what AJAX is and how it plays a role in create dynamic web pages
            </BulletPoint>
            <BulletPoint>
                Write code to Send and receive XML data to and from the server and the client 
            </BulletPoint>
        </Outline>
    </Overview>
    <Introduction>
        JavaScript is a client-side scripting language that enables HTML elements to be interactive. JavaScript works directly with AJAX to 
        create a better user experience by creating events upon user input and transferring data between the client and server without having 
        to constantly refresh the entire page.
    </Introduction>
    <Section>5.1 What is JavaScript?</Section>
    <paragraph>
        JavaScript is a client-side scripting language that can be used to perform tasks to save time and data transfer between the server
        and the client. For example, if there is a simple calculation, such as adding two inputs from the user, then it may be redundant
        to have to send that data back to a server so it can return the result of such a simple calculation back. Just keep in mind that if
        you are using JavaScript, do not store any sensitive data in JavaScript because anyone who has access to the website can use a console
        viewer and view any of the data stored. JavaScript helps in making HTML more interactive, since it can create actions, effects, transitions,
        etc when events occurs on an HTML element or page (such as clicking a button, typing into an input, etc.)
    </paragraph>
    <paragraph>
        JavaScript can be used in similar ways as CSS can. Some JavaScript functions can be called for an event in an inline HTML element
        (For example, <Image filename="4.1_1.png" description="a <button> element with an inline onclick listener"> would create a button that would 
        call the functions "javascriptFunction" when it is clicked). For similar reasons as with CSS, it is not recommended to call JavaScript 
        functions in this manner, as it makes maintainability and scalability more difficult. JavaScript can be declared inside an HTML file by 
        using the <script>"...JavaScript Here"</script>. The JavaScript decan be defined between the two script tags. As well, JavaScript can
        be defined outside of an HTML file, as its own external JavaScript file (ending with .js). The JavaScript can be included into any
        HTML file by using the same script tag, but with a src attribute that points to the location of the JavaScript file (ex.
        <script filename="myJavascriptFile.js"></script>).
    </paragraph>
    <Section>5.2 Brief Introduction to AJAX</Section>
    <paragraph>
        In the discussions so far about web pages, the current way of communicating with a server is by using a form and refreshing the page
        in order to send and receive data between the server and the client. This approach is fine, unless the user has to go through many
        web pages, or is required to repeatedly input information. The reason why the the way we have been inputting information into the
        web pages is bad for this type of application is because it takes too long. Refreshing the entire page to load data if whenever the
        user wants to send in information can take a long time. This is especially true for validating inputs. For example, we don't want to
        refresh the entire page just to check if one of the user's inputs is in the correct format. AJAX is a way around this, as it creates
        a dynamic web page that is able to asynchronously send and receive data between the client and server and updating the webpage without
        having to refresh the entire webpage.
    </paragraph>
    <paragraph>
        One way of creating an AJAX application is through the use of XMLHttpRequests, which sends and recieves XML data between the
        server and the client. Here's an example of how to open a connection to asynchronously request from a server XML document and display
        the requested information back to the client.
    </paragraph>
    <Image filename="4.2_1.png" description="
        A function using XMLHttpRequest function and checking the ready state and status of the request before performing a callback function
        call to use the read XML data
    ">
    <paragraph>
        Let's take a look at the above function, called readXML. This function will create an XMLHttpRequest to a URL, and when the request is
        ready, then a callback function is called. First, this method takes in a url as an input, which is the path to the URL that the user will
        be requesting from. The line <Image filename="4.2_2.png" description="XMHttpRequest function"> creates the XMLHttpRequest and assigns it 
        to a variable called xhr. This variable will be used to deal with the XMLHttpRequest. The next chunk of code,
    </paragraph>
    <Image filename="4.2_3.png" description="
        The check for ready state and status of the request before calling the callback funciton
    ">
    <paragraph>
        sets an event handler for the xhr variable, which will call a function if the ready state of the request changes. The function that
        is called will check if the request is complete (readyState === 4) and that the client has successfully received the request (status === 200).
        If these two conditions are satisfied, then a callback function is called, passing in the request (callbackFunction(this)). "this" contains all
        of the information from the request. Before the onreadystatechange is called, the request must be opened first, which occurs in the lines 
    </paragraph>
    <Image filename="4.2_4.png" description="
        Opening an XMLHttpRequest at a given URL using a get type of method.
    ">
    <paragraph>
        The xhr is opened using a "get" request to the URL. The third parameter, which is set to false, specifies if the request is asynchronous or not.
        Finally, in the send method (xhr.send(null)), this means that the request is not submitting data in the body of the request.
    </paragraph>


    <Question name="Question1">Question 1. JavaScript is a scripting language that works on the </Question>
        <Answer name="Question1" correct="">A. Server-side</Answer>
        <Answer name="Question1" correct="*">B. Client-side</Answer>
        <Answer name="Question1" correct="">C. As an intermediate between the server-side and client-side</Answer>
        <Answer name="Question1" correct="">D. None of the Above</Answer>
    <Question name="Question2">Question 2. Is it safe to store sensitive data in JavaScript objects and why? Choose the best Answer.</Question>
        <Answer name="Question2" correct="">A. Yes, because the client cannot view the data</Answer>
        <Answer name="Question2" correct="*">B. No, because the data can be viewed through the browser console</Answer>
        <Answer name="Question2" correct="">C. Yes, because the data is encrypted when stored and decrypted when displayed</Answer>
        <Answer name="Question2" correct="">D. Both A and C</Answer>
    <Question name="Question3">Question 3. What does AJAX do?</Question>
        <Answer name="Question3" correct="">A. Helps transfer data between the client and server asynchronously</Answer>
        <Answer name="Question3" correct="">B. Helps transfer data between the client and server synchronously</Answer>
        <Answer name="Question3" correct="">C. Helps store data on the client side</Answer>
        <Answer name="Question3" correct="*">D. Both A and B</Answer>
    <Question name="Question4">Question 4. Where can JavaScript code reside?</Question>
        <Answer name="Question4" correct="">A. Inline HTML elements</Answer>
        <Answer name="Question4" correct="">B. External JavaScript file</Answer>
        <Answer name="Question4" correct="">C. In a script tag in the HTML document</Answer>
        <Answer name="Question4" correct="*">D. All of the Above</Answer>
    <Question name="Question5">Question 5. What does the readyState and status in an XMLHttpRequest stand for?</Question>
        <Answer name="Question5" correct="*">A. Done (sent) and Successful</Answer>
        <Answer name="Question5" correct="">B. Loading (processing) and Found</Answer>
        <Answer name="Question5" correct="">C. Loading (processing) and Successful</Answer>
        <Answer name="Question5" correct="">D. Done (sent) and Found</Answer>
